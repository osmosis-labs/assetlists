{
  "$schema": "https://json-schema.org/draft-07/schema",
  "title": "Osmosis Zone List",
  "description": "Osmosis Zone List is a basic list of assets, in order as shown on the Osmosis Zone.",
  "type": "object",
  "required": [
    "chain_name",
    "assets"
  ],
  "properties": {
    "$schema": {
      "type": "string",
      "pattern": "^\\.\\./zone\\.schema\\.json$"
    },
    "chain_name": {
      "type": "string"
    },
    "assets": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/asset"
      }
    }
  },
  "additionalPropserties": false,
  "$defs": {
    "asset": {
      "type": "object",
      "required": [
        "chain_name",
        "base_denom"
      ],
      "additionalProperties": false,
      "properties": {
        "chain_name": {
          "type": "string",
          "description": "Chain name as used in the Cosmos Chain Registry"
        },
        "base_denom": {
          "type": "string",
          "description": "Base denomination as used for the asset in the Cosmos Chain Registry"
        },
        "path": {
          "type": "string",
          "description": "The entire IBC path, with the port and channel data for each hop"
        },
        "osmosis_verified": {
          "type": "boolean",
          "description": "Whether the asset have verified status Osmosis Zone app."
        },
        "osmosis_unstable": {
          "type": "boolean",
          "description": "Whether the asset can reliably be transferred to or from Osmosis."
        },
        "osmosis_disabled": {
          "type": "boolean",
          "description": "Whether the asset Deposit and Withdraw functions are disabled on Osmosis."
        },
        "is_alloyed": {
          "type": "boolean",
          "description": "Whether the asset is an Alloyed Asset on Osmosis."
        },
        "osmosis_unlisted": {
          "type": "boolean",
          "description": "Whether the asset should be temporarily unlisted on the Osmosis Zone app."
        },
        "tooltip_message": {
          "type": "string",
          "description": "A custom on-hover tooltip message descirbing the asset on the Osmosis Zone app."
        },
        "listing_date_time_utc": {
          "type": "string",
          "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
        },
        "osmosis_validated": {
          "type": "boolean",
          "description": "Whether the asset has been confrimed by a human to display and function correctly on Osmosis Zone."
        },
        "canonical": {
          "type": "object",
          "required": [
            "chain_name",
            "base_denom"
          ],
          "additionalProperties": false,
          "properties": {
            "chain_name": {
              "type": "string",
              "description": "Chain name as used in the Cosmos Chain Registry"
            },
            "base_denom": {
              "type": "string",
              "description": "Base denomination as used for the asset in the Cosmos Chain Registry"
            }
          }
        },
        "origin": {
          "type": "object",
          "required": [
            "chain_name",
            "base_denom"
          ],
          "additionalProperties": false,
          "properties": {
            "chain_name": {
              "type": "string",
              "description": "Chain name as used in the Cosmos Chain Registry"
            },
            "base_denom": {
              "type": "string",
              "description": "Base denomination as used for the asset in the Cosmos Chain Registry"
            }
          }
        },
        "transfer_methods": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the provider of the method or interface used to transfer the asset to/from the chain."
              },
              "type": {
                "type": "string",
                "enum": [
                  "external_interface",
                  "integrated_bridge",
                  "fiat_onramp"
                ]
              },
              "osmosis_validated": {
                "type": "boolean",
                "description": "Whether the transfer method has been tested by a human and confirm to be working correctly."
              }
            },
            "oneOf": [
              { "$ref": "#/$defs/external_interface" },
              { "$ref": "#/$defs/fiat_onramp" }
            ]
          }
        },
        "peg_mechanism": {
          "type": "string",
          "description": "The peg mechanism for synthetically created assets--most important for stablecoins.",
          "enum": [
            "collateralized",
            "algorithmic",
            "hybrid"
          ]
        },
        "override_properties": {
          "type": "object",
          "description": "Properties that should not follow the Chain Registry, and behave or appear differently on Osmosis Zone.",
          "additionalProperties": true,
          "properties": {
            "symbol": {
              "type": "string",
              "description": "The symbol of an asset. For example BTC."
            },
            "logo_URIs": {
              "type": "object",
              "properties": {
                "png": {
                  "type": "string",
                  "format": "uri-reference",
                  "pattern": "^https://raw\\.githubusercontent\\.com/cosmos/chain-registry/master/(|testnets/|_non-cosmos/)[a-z0-9]+/images/.+\\.png$"
                },
                "svg": {
                  "type": "string",
                  "format": "uri-reference",
                  "pattern": "^https://raw\\.githubusercontent\\.com/cosmos/chain-registry/master/(|testnets/|_non-cosmos/)[a-z0-9]+/images/.+\\.svg$"
                }
              }
            },
            "coingecko_id": {
              "type": "string",
              "description": "[OPTIONAL] The coingecko id to fetch asset data from coingecko v3 api. See https://api.coingecko.com/api/v3/coins/list"
            },
            "name": {
              "type": "string",
              "description": "How the asset should be described. E.g., $USTC is named: 'Terra USD'."
            },
            "counterparty": {
              "type": "array",
              "description": "Define the counterparty variants that the Zone should look for.",
              "minItems": 1,
              "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "chain_name",
                  "base_denom"
                ],
                "properties": {
                  "chain_name": {
                    "type": "string"
                  },
                  "base_denom": {
                    "type": "string"
                  }
                }
              }
            },
            "ibc": {
              "description": "Define the IBC connection when not pulling the data from the Chain Registry.",
              "anyOf": [
                {
                  "$ref": "#/$defs/ibc_transition"
                },
                {
                  "$ref": "#/$defs/ibc_cw20_transition"
                }
              ]
            }
          }
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "defi",
              "meme",
              "liquid_staking",
              "sail_initiative",
              "bridges",
              "nft_protocol",
              "depin",
              "ai",
              "stablecoin",
              "privacy",
              "social",
              "oracles",
              "dweb",
              "rwa",
              "gaming",
              "built_on_osmosis"
            ]
          },
          "minItems": 1
        },
        "_comment": {
          "type": "string",
          "description": "Comment can be anything, but should be used to identify and asset by ticket symbol and name.",
          "example": "Osmosis $OSMO"
        }
      }
    },
    "external_interface": {
      "type": "object",
      "properties": {
        "type": {
          "const": "external_interface"
        },
        "deposit_url": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the interface used for depositing the asset to this chain."
        },
        "withdraw_url": {
          "type": "string",
          "format": "uri",
          "description": "The URL of the interface used for withdrawing the asset to this chain."
        }
      }
    },
    "fiat_onramp": {
      "type": "object",
      "properties": {
        "type": {
          "const": "fiat_onramp"
        },
        "name": {
          "type": "string"
        },
        "providerAssetId": {
          "type": "string"
        }
      },
      "required": [
        "providerAssetId"
      ]
    },
    "ibc_transition": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "counterparty",
        "chain"
      ],
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "enum": [
            "ibc"
          ]
        },
        "counterparty": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "chain_name",
            "base_denom",
            "channel_id"
          ],
          "properties": {
            "chain_name": {
              "type": "string",
              "minLength": 1,
              "description": "The name of the counterparty chain. (must match exactly the chain name used in the Chain Registry)"
            },
            "base_denom": {
              "type": "string",
              "minLength": 1,
              "description": "The base unit of the asset on its source platform. E.g., when describing ATOM from Cosmos Hub, specify 'uatom', NOT 'atom' nor 'ATOM'; base units are unique per platform."
            },
            "channel_id": {
              "$ref": "#/$defs/channel_id"
            }
          }
        },
        "chain": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "channel_id",
            "path"
          ],
          "properties": {
            "channel_id": {
              "$ref": "#/$defs/channel_id"
            },
            "path": {
              "$ref": "#/$defs/path"
            }
          }
        }
      }
    },
    "ibc_cw20_transition": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type",
        "counterparty",
        "chain"
      ],
      "properties": {
        "type": {
          "type": "string",
          "minLength": 1,
          "enum": [
            "ibc-cw20"
          ]
        },
        "counterparty": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "chain_name",
            "base_denom",
            "port",
            "channel_id"
          ],
          "properties": {
            "chain_name": {
              "type": "string",
              "minLength": 1,
              "description": "The name of the counterparty chain. (must match exactly the chain name used in the Chain Registry)"
            },
            "base_denom": {
              "type": "string",
              "minLength": 1,
              "description": "The base unit of the asset on its source platform. E.g., when describing ATOM from Cosmos Hub, specify 'uatom', NOT 'atom' nor 'ATOM'; base units are unique per platform."
            },
            "port": {
              "$ref": "#/$defs/port"
            },
            "channel_id": {
              "$ref": "#/$defs/channel_id"
            }
          }
        },
        "chain": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "port",
            "channel_id",
            "path"
          ],
          "properties": {
            "port": {
              "$ref": "#/$defs/port"
            },
            "channel_id": {
              "$ref": "#/$defs/channel_id"
            },
            "path": {
              "$ref": "#/$defs/path"
            }
          }
        }
      }
    },
    "port": {
      "type": "string",
      "minLength": 1,
      "description": "The port used to transfer IBC assets; often 'transfer', but sometimes varies, e.g., for outgoing cw20 transfers."
    },
    "channel_id": {
      "type": "string",
      "minLength": 1,
      "pattern": "^channel-(JEnb|\\d+)$",
      "description": "The IBC transfer channel(, e.g., 'channel-1')."
    },
    "path": {
      "type": "string",
      "minLength": 1,
      "description": "The port/channel/denom input string that generates the 'ibc/...' denom."
    }
  }
}
